{"version":3,"file":"rete-connection-reroute-plugin.min.js","sources":["src/utils.ts","src/extensions/selectable.ts","src/index.ts","src/storage.ts"],"sourcesContent":["import { Position } from './types'\n\n// eslint-disable-next-line max-statements\nexport function findRightIndexBack(point: any, line: Position[] = []) {\n  let minIdx = -1\n  let minDist = Infinity\n\n  for (let index = 0; index < line.length; index++) {\n    const point1 = line[index]\n    const dist = distance(point, point1)\n\n    if (dist < minDist) {\n      minIdx = index\n      minDist = dist\n    }\n  }\n\n  if (minIdx === 0) {\n    return 0\n  }\n  if (minIdx === line.length - 1) {\n    return minIdx - 1\n  }\n\n  const leftDistBwtTarget = distance(point, line[minIdx - 1])\n  const leftDistBwtMinIdx = distance(line[minIdx], line[minIdx - 1])\n\n  if (leftDistBwtTarget < leftDistBwtMinIdx) {\n    return minIdx - 1\n  }\n\n  return minIdx\n}\n\nexport function distance(point0: Position, point1: Position) {\n  return Math.sqrt(Math.pow(point1.x - point0.x, 2) + Math.pow(point1.y - point0.y, 2))\n}\n\n// eslint-disable-next-line max-statements\nexport function findRightIndex(point: Position, line: Position[] = []) {\n  let minIdx = -1\n  let minDist = Infinity\n\n  for (let index = 0; index < line.length - 1; index++) {\n    if (pointInBound(point, line[index], line[index + 1])) {\n      const dist = distanceToLine(point, line[index], line[index + 1])\n\n      if (dist < minDist) {\n        minIdx = index\n        minDist = dist\n      }\n    }\n  }\n  if (minIdx === -1) {\n    return findRightIndexBack(point, line)\n  }\n  return minIdx\n}\n\n// eslint-disable-next-line max-statements, complexity\nexport function pointInBound(p0: Position, p1: Position, p2: Position) {\n  const { x: x1, y: y1 } = p1\n  const { x: x2, y: y2 } = p2\n  const { x: x0, y: y0 } = p0\n\n  if (x1 < x0 && x0 < x2 && y1 < y0 && y0 < y2) {\n    return true\n  }\n  if (x2 < x0 && x0 < x1 && y2 < y0 && y0 < y1) {\n    return true\n  }\n  if (x1 < x0 && x0 < x2 && y1 > y0 && y0 > y2) {\n    return true\n  }\n  if (x2 < x0 && x0 < x1 && y2 > y0 && y0 > y1) {\n    return true\n  }\n\n  return false\n}\n\nexport function distanceToLine(p0: Position, p1: Position, p2: Position) {\n  const top = (p2.y - p1.y) * p0.x\n        - (p2.x - p1.x) * p0.y\n        + p2.x * p1.y\n        - p2.y * p1.x\n  const bot = Math.pow((p2.y - p1.y), 2) + Math.pow((p2.x - p1.x), 2)\n\n  return Math.abs(top) / Math.sqrt(bot)\n}\n\nexport function alignEndsHorizontally(points: [number, number][], curvature: number) {\n  const p1 = points[0]\n  const p2 = points[1]\n  const p3 = points[points.length - 2]\n  const p4 = points[points.length - 1]\n  const hx1 = p1[0] + Math.abs(p2[0] - p1[0]) * curvature\n  const hx2 = p4[0] - Math.abs(p4[0] - p3[0]) * curvature\n\n  points = [...points]\n  points.splice(1, 0, [hx1, p1[1]])\n  points.splice(points.length - 1, 0, [hx2, p4[1]])\n\n  return points\n}\n","import { BaseSchemes } from 'rete'\nimport { AreaExtensions } from 'rete-area-plugin'\n\ntype Selector = ReturnType<typeof AreaExtensions.selector>\n\nimport { ReroutePlugin } from '..'\n\n/**\n * Enables synchronization between pins and the selector\n * @param reroutePlugin Reroute plugin instance\n * @param selector Selector instance\n * @param accumulating Accumulating state\n * @listens pinselected\n * @listens pinunselected\n * @listens pintranslated\n */\nexport function selectablePins<S extends BaseSchemes>(reroutePlugin: ReroutePlugin<S>, selector: Selector, accumulating: { active(): boolean }) {\n  // eslint-disable-next-line max-statements\n  reroutePlugin.addPipe(context => {\n    if (!('type' in context)) return context\n\n    if (context.type === 'pinselected') {\n      const { id } = context.data\n\n      selector.add({\n        id,\n        label: 'pin',\n        translate(dx, dy) {\n          reroutePlugin.translate(id, dx, dy)\n        },\n        unselect() {\n          reroutePlugin.unselect(id)\n        }\n      }, accumulating.active())\n      selector.pick({ id, label: 'pin' })\n    }\n    if (context.type === 'pinunselected') {\n      const { id } = context.data\n\n      selector.remove({ id, label: 'pin' })\n    }\n    if (context.type === 'pintranslated') {\n      const { id, dx, dy } = context.data\n\n      if (selector.isPicked({ id, label: 'pin' })) selector.translate(dx, dy)\n    }\n    return context\n  })\n}\n","import { BaseSchemes, ConnectionId, getUID, Scope } from 'rete'\nimport { BaseArea, BaseAreaPlugin, RenderSignal } from 'rete-area-plugin'\nimport { classicConnectionPath } from 'rete-render-utils'\n\nimport { getPinsStorage, PinStorageRecord } from './storage'\nimport { PinData, Position } from './types'\nimport { findRightIndex } from './utils'\n\nexport * as RerouteExtensions from './extensions'\n\n/**\n * Signal types consumed by the plugin\n */\nexport type RerouteExtra =\n  | RenderSignal<'reroute-pins', { data: PinData }>\n  | { type: 'unmount', data: { element: HTMLElement } }\n\ntype Requires<Schemes extends BaseSchemes> =\n  | { type: 'connectionpath', data: { payload: Schemes['Connection'], path?: string, points: Position[] } }\n\n/**\n * Signal types produced by the plugin\n * @priority 10\n */\nexport type RerouteProduces =\n  | { type: 'pintranslated', data: { id: string, dx: number, dy: number } }\n  | { type: 'pinselected', data: { id: string } }\n  | { type: 'pinunselected', data: { id: string } }\n\n/**\n * Reroute plugin\n * @listens rendered\n * @listens unmount\n * @listens reordered\n * @listens connectionpath\n * @listens pointerdown\n * @emits pintranslated\n * @emits pinselected\n * @emits pinunselected\n * @priority 9\n */\nexport class ReroutePlugin<Schemes extends BaseSchemes> extends Scope<RerouteProduces, [Requires<Schemes>, BaseArea<Schemes> | RerouteExtra]> {\n  pinContainers = new Map<ConnectionId, { element: HTMLElement }>()\n  pinParents = new Map<HTMLElement, { id: ConnectionId, pinContainer: HTMLElement }>()\n  pins = getPinsStorage()\n\n  constructor() {\n    super('connection-reroute')\n  }\n\n  setParent(scope: Scope<Requires<Schemes>, [BaseArea<Schemes> | RerouteExtra]>): void {\n    super.setParent(scope)\n    type Base = BaseAreaPlugin<Schemes, BaseArea<Schemes> | RerouteExtra>\n\n    // eslint-disable-next-line max-statements, complexity\n    scope.addPipe(context => {\n      if (!context || typeof context !== 'object' || !('type' in context)) return context\n\n      if (context.type === 'rendered' && context.data.type === 'connection') {\n        const area = scope.parentScope<Base>(BaseAreaPlugin)\n        const { element, payload: { id } } = context.data\n\n        if (!this.pinParents.has(element)) {\n          const pinContainer = document.createElement('div')\n\n          pinContainer.dataset['type'] = 'pin-container'\n          this.pinContainers.set(id, { element: pinContainer })\n          this.pinParents.set(element, { id, pinContainer })\n          area.area.content.add(pinContainer)\n          area.area.content.reorder(pinContainer, element.nextElementSibling)\n        }\n      }\n      if (context.type === 'unmount') {\n        const area = scope.parentScope<Base>(BaseAreaPlugin)\n        const { element } = context.data\n        const record = this.pinParents.get(element)\n\n        if (record) {\n          this.pinParents.delete(element)\n          this.pinContainers.delete(record.id)\n          area.emit({ type: 'unmount', data: { element: record.pinContainer } })\n          area.area.content.remove(record.pinContainer)\n        }\n      }\n      if (context.type === 'reordered') {\n        const area = scope.parentScope<Base>(BaseAreaPlugin)\n        const { element } = context.data\n        const record = this.pinParents.get(element)\n\n        if (record) {\n          area.area.content.reorder(record.pinContainer, element.nextElementSibling)\n        }\n      }\n      if (context.type === 'connectionpath') {\n        const area = scope.parentScope<Base>(BaseAreaPlugin)\n        const { payload: { id } } = context.data\n        const container = this.pinContainers.get(id)\n        const start = context.data.points[0]\n        const end = context.data.points[context.data.points.length - 1]\n\n        const pins = this.pins.getPins(id)\n\n        if (container) {\n          area.emit({\n            type: 'render', data: {\n              type: 'reroute-pins',\n              element: container.element,\n              data: { id, pins }\n            }\n          })\n        }\n\n        const points = [start, ...pins.map(item => item.position), end]\n        let path = ''\n\n        for (let i = 1; i < points.length; i++) {\n          const a = points[i - 1]\n          const b = points[i]\n\n          path += classicConnectionPath([a, b], 0.3) + ' '\n        }\n\n        return {\n          ...context,\n          data: {\n            ...context.data,\n            points,\n            path\n          }\n        }\n      }\n      if (context.type === 'pointerdown') {\n        const area = scope.parentScope<Base>(BaseAreaPlugin)\n        const path = context.data.event.composedPath()\n        const views = Array.from(area.connectionViews.entries())\n        const pickedConnection = views.find(([, view]) => path.includes(view.element))\n\n        if (pickedConnection) {\n          const [id, view] = pickedConnection\n          const svgPath = view.element.querySelector('path')\n          const pins = this.pins.getPins(id)\n\n          if (svgPath && pins) {\n            const position = { ...area.area.pointer }\n            const start = svgPath.getPointAtLength(0)\n            const end = svgPath.getPointAtLength(1)\n\n            const points: Position[] = [start, ...pins.map(p => p.position), end]\n            const index = findRightIndex(position, points)\n\n            this.add(id, position, index)\n          }\n        }\n      }\n      return context\n    })\n  }\n\n  /**\n   * Add a new pin to the connection\n   * @param connectionId Connection id\n   * @param position Pin position\n   * @param index Pin index, if not specified, the pin will be added to the end\n   */\n  public add(connectionId: ConnectionId, position: Position, index?: number) {\n    type Base = BaseAreaPlugin<Schemes, BaseArea<Schemes> | RerouteExtra>\n\n    const area = this.parentScope().parentScope<Base>(BaseAreaPlugin)\n    const pin = { id: getUID(), position }\n\n    this.pins.add(connectionId, pin, index)\n    area.update('connection', connectionId)\n  }\n\n  /**\n   * Translate pin\n   * @param pinId Pin id\n   * @param dx Delta x\n   * @param dy Delta y\n   */\n  public async translate(pinId: string, dx: number, dy: number) {\n    const pin = this.pins.getPin(pinId)\n\n    if (!pin) return\n    pin.position = { x: pin.position.x + dx, y: pin.position.y + dy }\n    this.update(pin)\n    await this.emit({ type: 'pintranslated', data: { id: pinId, dx, dy } })\n  }\n\n  /**\n   * Remove pin\n   * @param pinId Pin id\n   */\n  public async remove(pinId: string) {\n    const pin = this.pins.getPin(pinId)\n\n    if (!pin) return\n    if (pin.selected) await this.unselect(pinId)\n    this.pins.remove(pinId)\n    this.update(pin)\n  }\n\n  /**\n   * Select pin\n   * @param pinId Pin id\n   */\n  public async select(pinId: string) {\n    const pin = this.pins.getPin(pinId)\n\n    if (!pin) return\n    if (pin.selected) return\n    pin.selected = true\n    this.update(pin)\n    await this.emit({ type: 'pinselected', data: { id: pinId } })\n  }\n\n  /**\n   * Unselect pin\n   * @param pinId Pin id\n   */\n  public async unselect(pinId: string) {\n    const pin = this.pins.getPin(pinId)\n\n    if (!pin) return\n    if (!pin.selected) return\n    pin.selected = false\n    this.update(pin)\n    await this.emit({ type: 'pinunselected', data: { id: pinId } })\n  }\n\n  /**\n   * Update connection for the pin\n   * @param pin Pin id or pin record\n   */\n  public update(pin: string | PinStorageRecord) {\n    type Base = BaseAreaPlugin<Schemes, BaseArea<Schemes> | RerouteExtra>\n\n    const pinRecord = typeof pin === 'object' ? pin : this.pins.getPin(pin)\n    const area = this.parentScope().parentScope<Base>(BaseAreaPlugin)\n\n    if (!pinRecord) return\n    area.update('connection', pinRecord.connectionId)\n  }\n}\n","import { ConnectionId } from 'rete'\n\nimport { Pin } from './types'\n\nexport type PinStorageRecord = Pin & { connectionId: ConnectionId }\n\nexport function getPinsStorage() {\n  const connectionPins = new Map<ConnectionId, PinStorageRecord[]>()\n  const pins = new Map<string, PinStorageRecord>()\n\n  return {\n    add(connectionId: ConnectionId, pin: Pin, index?: number) {\n      if (pins.has(pin.id)) throw new Error('already exists')\n      const data = { ...pin, connectionId }\n      const list = [...connectionPins.get(connectionId) || []]\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      const _index = typeof index === 'number' ? index : list.length\n\n      list.splice(_index, 0, data)\n      connectionPins.set(connectionId, list)\n      pins.set(pin.id, data)\n    },\n    remove(id: string) {\n      const existing = this.getPin(id)\n\n      if (existing) {\n        const list = connectionPins.get(existing.connectionId) || []\n\n        connectionPins.set(existing.connectionId, list.filter(item => item.id !== existing.id))\n        pins.delete(existing.id)\n      }\n    },\n    getPin(id: string): PinStorageRecord | undefined {\n      return pins.get(id)\n    },\n    getPins(connectionId?: ConnectionId): PinStorageRecord[] {\n      if (connectionId) return connectionPins.get(connectionId) || []\n      return Array.from(pins.values())\n    }\n  }\n}\n"],"names":["distance","point0","point1","Math","sqrt","pow","x","y","findRightIndex","point","p0","p1","p2","top","bot","line","arguments","length","undefined","minIdx","minDist","Infinity","index","pointInBound","dist","abs","findRightIndexBack","x1","y1","x2","y2","x0","y0","reroutePlugin","selector","accumulating","addPipe","context","type","id","data","add","label","translate","dx","dy","unselect","active","pick","remove","_context$data","isPicked","ReroutePlugin","_Scope","_inherits","_unselect","_select","_remove","_translate","_super","_createSuper","_this","connectionPins","pins","_classCallCheck","_defineProperty","_assertThisInitialized","call","Map","getPinsStorage","connectionId","pin","has","Error","_objectSpread","list","_toConsumableArray","get","_index","splice","set","existing","this","getPin","filter","item","getPins","Array","from","values","key","value","scope","_this2","_get","_getPrototypeOf","prototype","_typeof","area","parentScope","BaseAreaPlugin","element","payload","pinParents","pinContainer","document","createElement","dataset","pinContainers","content","reorder","nextElementSibling","record","emit","container","start","points","end","concat","map","position","path","i","a","b","classicConnectionPath","event","composedPath","pickedConnection","connectionViews","entries","find","_ref","view","_slicedToArray","includes","_pickedConnection","svgPath","querySelector","pointer","getPointAtLength","p","getUID","update","_asyncToGenerator","_regeneratorRuntime","mark","_callee","pinId","wrap","_context","prev","next","abrupt","stop","_x","_x2","_x3","apply","_callee2","_context2","selected","_x4","_callee3","_context3","_x5","_callee4","_context4","_x6","pinRecord","Scope"],"mappings":"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"}