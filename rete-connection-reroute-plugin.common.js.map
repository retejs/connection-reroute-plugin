{"version":3,"file":"rete-connection-reroute-plugin.common.js","sources":["src/storage.ts","src/utils.ts","src/extensions/selectable.ts","src/extensions/index.ts","src/index.ts"],"sourcesContent":["import { ConnectionId } from 'rete'\n\nimport { Pin } from './types'\n\nexport type PinStorageRecord = Pin & { connectionId: ConnectionId }\n\nexport function getPinsStorage() {\n  const connectionPins = new Map<ConnectionId, PinStorageRecord[]>()\n  const pins = new Map<string, PinStorageRecord>()\n\n  return {\n    add(connectionId: ConnectionId, pin: Pin, index?: number) {\n      if (pins.has(pin.id)) throw new Error('already exists')\n      const data = { ...pin, connectionId }\n      const list = [...connectionPins.get(connectionId) || []]\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      const _index = typeof index === 'number' ? index : list.length\n\n      list.splice(_index, 0, data)\n      connectionPins.set(connectionId, list)\n      pins.set(pin.id, data)\n    },\n    remove(id: string) {\n      const existing = this.getPin(id)\n\n      if (existing) {\n        const list = connectionPins.get(existing.connectionId) || []\n\n        connectionPins.set(existing.connectionId, list.filter(item => item.id !== existing.id))\n        pins.delete(existing.id)\n      }\n    },\n    getPin(id: string): PinStorageRecord | undefined {\n      return pins.get(id)\n    },\n    getPins(connectionId?: ConnectionId): PinStorageRecord[] {\n      if (connectionId) return connectionPins.get(connectionId) || []\n      return Array.from(pins.values())\n    }\n  }\n}\n","import { Position } from './types'\n\n// eslint-disable-next-line max-statements\nexport function findRightIndexBack(point: any, line: Position[] = []) {\n  let minIdx = -1\n  let minDist = Infinity\n\n  for (let index = 0; index < line.length; index++) {\n    const point1 = line[index]\n    const dist = distance(point, point1)\n\n    if (dist < minDist) {\n      minIdx = index\n      minDist = dist\n    }\n  }\n\n  if (minIdx === 0) {\n    return 0\n  }\n  if (minIdx === line.length - 1) {\n    return minIdx - 1\n  }\n\n  const leftDistBwtTarget = distance(point, line[minIdx - 1])\n  const leftDistBwtMinIdx = distance(line[minIdx], line[minIdx - 1])\n\n  if (leftDistBwtTarget < leftDistBwtMinIdx) {\n    return minIdx - 1\n  }\n\n  return minIdx\n}\n\nexport function distance(point0: Position, point1: Position) {\n  return Math.sqrt(Math.pow(point1.x - point0.x, 2) + Math.pow(point1.y - point0.y, 2))\n}\n\n// eslint-disable-next-line max-statements\nexport function findRightIndex(point: Position, line: Position[] = []) {\n  let minIdx = -1\n  let minDist = Infinity\n\n  for (let index = 0; index < line.length - 1; index++) {\n    if (pointInBound(point, line[index], line[index + 1])) {\n      const dist = distanceToLine(point, line[index], line[index + 1])\n\n      if (dist < minDist) {\n        minIdx = index\n        minDist = dist\n      }\n    }\n  }\n  if (minIdx === -1) {\n    return findRightIndexBack(point, line)\n  }\n  return minIdx\n}\n\n// eslint-disable-next-line max-statements, complexity\nexport function pointInBound(p0: Position, p1: Position, p2: Position) {\n  const { x: x1, y: y1 } = p1\n  const { x: x2, y: y2 } = p2\n  const { x: x0, y: y0 } = p0\n\n  if (x1 < x0 && x0 < x2 && y1 < y0 && y0 < y2) {\n    return true\n  }\n  if (x2 < x0 && x0 < x1 && y2 < y0 && y0 < y1) {\n    return true\n  }\n  if (x1 < x0 && x0 < x2 && y1 > y0 && y0 > y2) {\n    return true\n  }\n  if (x2 < x0 && x0 < x1 && y2 > y0 && y0 > y1) {\n    return true\n  }\n\n  return false\n}\n\nexport function distanceToLine(p0: Position, p1: Position, p2: Position) {\n  const top = (p2.y - p1.y) * p0.x\n        - (p2.x - p1.x) * p0.y\n        + p2.x * p1.y\n        - p2.y * p1.x\n  const bot = Math.pow((p2.y - p1.y), 2) + Math.pow((p2.x - p1.x), 2)\n\n  return Math.abs(top) / Math.sqrt(bot)\n}\n\nexport function alignEndsHorizontally(points: [number, number][], curvature: number) {\n  const p1 = points[0]\n  const p2 = points[1]\n  const p3 = points[points.length - 2]\n  const p4 = points[points.length - 1]\n  const hx1 = p1[0] + Math.abs(p2[0] - p1[0]) * curvature\n  const hx2 = p4[0] - Math.abs(p4[0] - p3[0]) * curvature\n\n  points = [...points]\n  points.splice(1, 0, [hx1, p1[1]])\n  points.splice(points.length - 1, 0, [hx2, p4[1]])\n\n  return points\n}\n","import { BaseSchemes } from 'rete'\nimport { AreaExtensions } from 'rete-area-plugin'\n\ntype Selector = ReturnType<typeof AreaExtensions.selector>\n\nimport { ReroutePlugin } from '..'\n\n/**\n * Enables synchronization between pins and the selector\n * @param reroutePlugin Reroute plugin instance\n * @param selector Selector instance\n * @param accumulating Accumulating state\n * @listens pinselected\n * @listens pinunselected\n * @listens pintranslated\n */\nexport function selectablePins<S extends BaseSchemes>(reroutePlugin: ReroutePlugin<S>, selector: Selector, accumulating: { active(): boolean }) {\n  // eslint-disable-next-line max-statements\n  reroutePlugin.addPipe(context => {\n    if (!('type' in context)) return context\n\n    if (context.type === 'pinselected') {\n      const { id } = context.data\n\n      selector.add({\n        id,\n        label: 'pin',\n        translate(dx, dy) {\n          reroutePlugin.translate(id, dx, dy)\n        },\n        unselect() {\n          reroutePlugin.unselect(id)\n        }\n      }, accumulating.active())\n      selector.pick({ id, label: 'pin' })\n    }\n    if (context.type === 'pinunselected') {\n      const { id } = context.data\n\n      selector.remove({ id, label: 'pin' })\n    }\n    if (context.type === 'pintranslated') {\n      const { id, dx, dy } = context.data\n\n      if (selector.isPicked({ id, label: 'pin' })) selector.translate(dx, dy)\n    }\n    return context\n  })\n}\n","/**\n * Extensions for the connection reroute plugin\n * @module\n */\n\nexport { selectablePins } from './selectable'\n","import { BaseSchemes, ConnectionId, getUID, Scope } from 'rete'\nimport { BaseArea, BaseAreaPlugin, RenderSignal } from 'rete-area-plugin'\nimport { classicConnectionPath } from 'rete-render-utils'\n\nimport { getPinsStorage, PinStorageRecord } from './storage'\nimport { PinData, Position } from './types'\nimport { findRightIndex } from './utils'\n\nexport * as RerouteExtensions from './extensions'\n\n/**\n * Signal types consumed by the plugin\n */\nexport type RerouteExtra =\n  | RenderSignal<'reroute-pins', { data: PinData }>\n  | { type: 'unmount', data: { element: HTMLElement } }\n\ntype Requires<Schemes extends BaseSchemes> =\n  | { type: 'connectionpath', data: { payload: Schemes['Connection'], path?: string, points: Position[] } }\n\n/**\n * Signal types produced by the plugin\n * @priority 10\n */\nexport type RerouteProduces =\n  | { type: 'pintranslated', data: { id: string, dx: number, dy: number } }\n  | { type: 'pinselected', data: { id: string } }\n  | { type: 'pinunselected', data: { id: string } }\n\n/**\n * Reroute plugin\n * @listens rendered\n * @listens unmount\n * @listens reordered\n * @listens connectionpath\n * @listens pointerdown\n * @emits pintranslated\n * @emits pinselected\n * @emits pinunselected\n * @priority 9\n */\nexport class ReroutePlugin<Schemes extends BaseSchemes> extends Scope<RerouteProduces, [Requires<Schemes>, BaseArea<Schemes> | RerouteExtra]> {\n  pinContainers = new Map<ConnectionId, { element: HTMLElement }>()\n  pinParents = new Map<HTMLElement, { id: ConnectionId, pinContainer: HTMLElement }>()\n  pins = getPinsStorage()\n\n  constructor() {\n    super('connection-reroute')\n  }\n\n  setParent(scope: Scope<Requires<Schemes>, [BaseArea<Schemes> | RerouteExtra]>): void {\n    super.setParent(scope)\n    type Base = BaseAreaPlugin<Schemes, BaseArea<Schemes> | RerouteExtra>\n\n    // eslint-disable-next-line max-statements, complexity\n    scope.addPipe(context => {\n      if (!context || typeof context !== 'object' || !('type' in context)) return context\n\n      if (context.type === 'rendered' && context.data.type === 'connection') {\n        const area = scope.parentScope<Base>(BaseAreaPlugin)\n        const { element, payload: { id } } = context.data\n\n        if (!this.pinParents.has(element)) {\n          const pinContainer = document.createElement('div')\n\n          pinContainer.dataset['type'] = 'pin-container'\n          this.pinContainers.set(id, { element: pinContainer })\n          this.pinParents.set(element, { id, pinContainer })\n          area.area.content.add(pinContainer)\n          area.area.content.reorder(pinContainer, element.nextElementSibling)\n        }\n      }\n      if (context.type === 'unmount') {\n        const area = scope.parentScope<Base>(BaseAreaPlugin)\n        const { element } = context.data\n        const record = this.pinParents.get(element)\n\n        if (record) {\n          this.pinParents.delete(element)\n          this.pinContainers.delete(record.id)\n          area.emit({ type: 'unmount', data: { element: record.pinContainer } })\n          area.area.content.remove(record.pinContainer)\n        }\n      }\n      if (context.type === 'reordered') {\n        const area = scope.parentScope<Base>(BaseAreaPlugin)\n        const { element } = context.data\n        const record = this.pinParents.get(element)\n\n        if (record) {\n          area.area.content.reorder(record.pinContainer, element.nextElementSibling)\n        }\n      }\n      if (context.type === 'connectionpath') {\n        const area = scope.parentScope<Base>(BaseAreaPlugin)\n        const { payload: { id } } = context.data\n        const container = this.pinContainers.get(id)\n        const start = context.data.points[0]\n        const end = context.data.points[context.data.points.length - 1]\n\n        const pins = this.pins.getPins(id)\n\n        if (container) {\n          area.emit({\n            type: 'render', data: {\n              type: 'reroute-pins',\n              element: container.element,\n              data: { id, pins }\n            }\n          })\n        }\n\n        const points = [start, ...pins.map(item => item.position), end]\n        let path = ''\n\n        for (let i = 1; i < points.length; i++) {\n          const a = points[i - 1]\n          const b = points[i]\n\n          path += classicConnectionPath([a, b], 0.3) + ' '\n        }\n\n        return {\n          ...context,\n          data: {\n            ...context.data,\n            points,\n            path\n          }\n        }\n      }\n      if (context.type === 'pointerdown') {\n        const area = scope.parentScope<Base>(BaseAreaPlugin)\n        const path = context.data.event.composedPath()\n        const views = Array.from(area.connectionViews.entries())\n        const pickedConnection = views.find(([, view]) => path.includes(view.element))\n\n        if (pickedConnection) {\n          const [id, view] = pickedConnection\n          const svgPath = view.element.querySelector('path')\n          const pins = this.pins.getPins(id)\n\n          if (svgPath && pins) {\n            const position = { ...area.area.pointer }\n            const start = svgPath.getPointAtLength(0)\n            const end = svgPath.getPointAtLength(1)\n\n            const points: Position[] = [start, ...pins.map(p => p.position), end]\n            const index = findRightIndex(position, points)\n\n            this.add(id, position, index)\n          }\n        }\n      }\n      return context\n    })\n  }\n\n  /**\n   * Add a new pin to the connection\n   * @param connectionId Connection id\n   * @param position Pin position\n   * @param index Pin index, if not specified, the pin will be added to the end\n   */\n  public add(connectionId: ConnectionId, position: Position, index?: number) {\n    type Base = BaseAreaPlugin<Schemes, BaseArea<Schemes> | RerouteExtra>\n\n    const area = this.parentScope().parentScope<Base>(BaseAreaPlugin)\n    const pin = { id: getUID(), position }\n\n    this.pins.add(connectionId, pin, index)\n    area.update('connection', connectionId)\n  }\n\n  /**\n   * Translate pin\n   * @param pinId Pin id\n   * @param dx Delta x\n   * @param dy Delta y\n   */\n  public async translate(pinId: string, dx: number, dy: number) {\n    const pin = this.pins.getPin(pinId)\n\n    if (!pin) return\n    pin.position = { x: pin.position.x + dx, y: pin.position.y + dy }\n    this.update(pin)\n    await this.emit({ type: 'pintranslated', data: { id: pinId, dx, dy } })\n  }\n\n  /**\n   * Remove pin\n   * @param pinId Pin id\n   */\n  public async remove(pinId: string) {\n    const pin = this.pins.getPin(pinId)\n\n    if (!pin) return\n    if (pin.selected) await this.unselect(pinId)\n    this.pins.remove(pinId)\n    this.update(pin)\n  }\n\n  /**\n   * Select pin\n   * @param pinId Pin id\n   */\n  public async select(pinId: string) {\n    const pin = this.pins.getPin(pinId)\n\n    if (!pin) return\n    if (pin.selected) return\n    pin.selected = true\n    this.update(pin)\n    await this.emit({ type: 'pinselected', data: { id: pinId } })\n  }\n\n  /**\n   * Unselect pin\n   * @param pinId Pin id\n   */\n  public async unselect(pinId: string) {\n    const pin = this.pins.getPin(pinId)\n\n    if (!pin) return\n    if (!pin.selected) return\n    pin.selected = false\n    this.update(pin)\n    await this.emit({ type: 'pinunselected', data: { id: pinId } })\n  }\n\n  /**\n   * Update connection for the pin\n   * @param pin Pin id or pin record\n   */\n  public update(pin: string | PinStorageRecord) {\n    type Base = BaseAreaPlugin<Schemes, BaseArea<Schemes> | RerouteExtra>\n\n    const pinRecord = typeof pin === 'object' ? pin : this.pins.getPin(pin)\n    const area = this.parentScope().parentScope<Base>(BaseAreaPlugin)\n\n    if (!pinRecord) return\n    area.update('connection', pinRecord.connectionId)\n  }\n}\n"],"names":["getPinsStorage","connectionPins","Map","pins","add","connectionId","pin","index","has","id","Error","data","_objectSpread","list","_toConsumableArray","get","_index","length","splice","set","remove","existing","getPin","filter","item","getPins","Array","from","values","findRightIndexBack","point","line","arguments","undefined","minIdx","minDist","Infinity","point1","dist","distance","leftDistBwtTarget","leftDistBwtMinIdx","point0","Math","sqrt","pow","x","y","findRightIndex","pointInBound","distanceToLine","p0","p1","p2","x1","y1","x2","y2","x0","y0","top","bot","abs","selectablePins","reroutePlugin","selector","accumulating","addPipe","context","type","label","translate","dx","dy","unselect","active","pick","_context$data","isPicked","ReroutePlugin","_Scope","_inherits","_super","_createSuper","_this","_classCallCheck","call","_defineProperty","_assertThisInitialized","_createClass","key","value","setParent","scope","_this2","_get","_getPrototypeOf","prototype","_typeof","area","parentScope","BaseAreaPlugin","element","payload","pinParents","pinContainer","document","createElement","dataset","pinContainers","content","reorder","nextElementSibling","record","emit","container","start","points","end","concat","map","position","path","i","a","b","classicConnectionPath","event","composedPath","views","connectionViews","entries","pickedConnection","find","_ref","_ref2","_slicedToArray","view","includes","_pickedConnection","svgPath","querySelector","pointer","getPointAtLength","p","getUID","update","_translate","_asyncToGenerator","_regeneratorRuntime","mark","_callee","pinId","wrap","_callee$","_context","prev","next","abrupt","stop","_x","_x2","_x3","apply","_remove","_callee2","_callee2$","_context2","selected","_x4","_select","_callee3","_callee3$","_context3","select","_x5","_unselect","_callee4","_callee4$","_context4","_x6","pinRecord","Scope"],"mappings":"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"}